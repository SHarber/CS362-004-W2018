        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
       30:   11:	if (*(int*)a < *(int*)b)
        8:   12:		return -1;
       22:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:			int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:			 struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
        1:   44:	SelectStream(1);
        1:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
        1:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:		{
    #####:   50:			return -1;
        -:   51:		}
        -:   52:
        -:   53:	//set number of players
        1:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       11:   57:	for (i = 0; i < 10; i++)
        -:   58:		{
      110:   59:			for (j = 0; j < 10; j++)
        -:   60:				{
      100:   61:		if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:				}
        -:   66:		}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        1:   73:	if (numPlayers == 2)
        -:   74:		{
        1:   75:			state->supplyCount[curse] = 10;
        -:   76:		}
    #####:   77:	else if (numPlayers == 3)
        -:   78:		{
    #####:   79:			state->supplyCount[curse] = 20;
        -:   80:		}
        -:   81:	else
        -:   82:		{
    #####:   83:			state->supplyCount[curse] = 30;
        -:   84:		}
        -:   85:
        -:   86:	//set number of Victory cards
        1:   87:	if (numPlayers == 2)
        -:   88:		{
        1:   89:			state->supplyCount[estate] = 8;
        1:   90:			state->supplyCount[duchy] = 8;
        1:   91:			state->supplyCount[province] = 8;
        -:   92:		}
        -:   93:	else
        -:   94:		{
    #####:   95:			state->supplyCount[estate] = 12;
    #####:   96:			state->supplyCount[duchy] = 12;
    #####:   97:			state->supplyCount[province] = 12;
        -:   98:		}
        -:   99:
        -:  100:	//set number of Treasure cards
        1:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:	state->supplyCount[silver] = 40;
        1:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       21:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:		{
      165:  108:			for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:		if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       10:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        2:  115:			if (numPlayers == 2){
        1:  116:				state->supplyCount[i] = 8;
        -:  117:			}
    #####:  118:			else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:				else
        -:  121:		{
        9:  122:			state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:				break;
        -:  125:			}
        -:  126:		else    //card is not in the set choosen for the game
        -:  127:			{
      145:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:	}
        -:  131:
        -:  132:		}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        3:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:		{
        2:  140:			state->deckCount[i] = 0;
        8:  141:			for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:		state->deck[i][j] = estate;
        6:  144:		state->deckCount[i]++;
        -:  145:	}
       16:  146:			for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:		state->deck[i][j] = copper;
       14:  149:		state->deckCount[i]++;
        -:  150:	}
        -:  151:		}
        -:  152:
        -:  153:	//shuffle player decks
        3:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:		{
        2:  156:			if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:		return -1;
        -:  159:	}
        -:  160:		}
        -:  161:
        -:  162:	//draw player hands
        3:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:		{
        -:  165:			//initialize hand size to zero
        2:  166:			state->handCount[i] = 0;
        2:  167:			state->discardCount[i] = 0;
        -:  168:			//draw 5 cards
        -:  169:			// for (j = 0; j < 5; j++)
        -:  170:			//	{
        -:  171:			//	  drawCard(i, state);
        -:  172:			//	}
        -:  173:		}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       28:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:		{
       27:  178:			state->embargoTokens[i] = 0;
        -:  179:		}
        -:  180:
        -:  181:	//initialize first player's turn
        1:  182:	state->outpostPlayed = 0;
        1:  183:	state->phase = 0;
        1:  184:	state->numActions = 1;
        1:  185:	state->numBuys = 1;
        1:  186:	state->playedCardCount = 0;
        1:  187:	state->whoseTurn = 0;
        1:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
        6:  192:	for (it = 0; it < 5; it++){
        5:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
        1:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:	return 0;
        -:  199:}
        -:  200:
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       14:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       14:  209:	if (state->deckCount[player] < 1)
       12:  210:		return -1;
        2:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:	while (state->deckCount[player] > 0) {
       20:  215:		card = floor(Random() * state->deckCount[player]);
       20:  216:		newDeck[newDeckPos] = state->deck[player][card];
       20:  217:		newDeckPos++;
       53:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
       33:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
       20:  221:		state->deckCount[player]--;
        -:  222:	}
       22:  223:	for (i = 0; i < newDeckPos; i++) {
       20:  224:		state->deck[player][i] = newDeck[i];
       20:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
        2:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:		{
    #####:  239:			return -1;
        -:  240:		}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:		{
    #####:  245:			return -1;
        -:  246:		}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:		{
    #####:  254:			return -1;
        -:  255:		}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:		{
    #####:  260:			return -1;
        -:  261:		}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG)
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:		{
    #####:  330:			if (state->deck[player][i] == card) count++;
        -:  331:		}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:		{
    #####:  335:			if (state->hand[player][i] == card) count++;
        -:  336:		}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:		{
    #####:  340:			if (state->discard[player][i] == card) count++;
        -:  341:		}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
    #####:  395:	if (state->supplyCount[province] == 0)
        -:  396:		{
    #####:  397:			return 1;
        -:  398:		}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
    #####:  401:	j = 0;
    #####:  402:	for (i = 0; i < 25; i++)
        -:  403:		{
    #####:  404:			if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:		j++;
        -:  407:	}
        -:  408:		}
    #####:  409:	if ( j >= 3)
        -:  410:		{
    #####:  411:			return 1;
        -:  412:		}
        -:  413:
    #####:  414:	return 0;
        -:  415:}
        -:  416:
       10:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
       10:  420:	int score = 0;
        -:  421:	//score from hand
       60:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:		{
       50:  424:			if (state->hand[player][i] == curse) { score = score - 1; };
       50:  425:			if (state->hand[player][i] == estate) { score = score + 1; };
       50:  426:			if (state->hand[player][i] == duchy) { score = score + 3; };
       50:  427:			if (state->hand[player][i] == province) { score = score + 6; };
       50:  428:			if (state->hand[player][i] == great_hall) { score = score + 1; };
       50:  429:			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:		}
        -:  431:
        -:  432:	//score from discard
       10:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:		{
    #####:  435:			if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:			if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:			if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:			if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:			if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:		}
        -:  442:
        -:  443:	//score from deck
       10:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:		{
    #####:  446:			if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:			if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:			if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:			if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:			if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:		}
        -:  453:
       10:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:		{
        -:  466:			//set unused player scores to -9999
    #####:  467:			if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:		players[i] = -9999;
        -:  470:	}
        -:  471:			else
        -:  472:	{
    #####:  473:		players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:		}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:		{
    #####:  481:			if (players[i] > players[j])
        -:  482:	{
    #####:  483:		j = i;
        -:  484:	}
        -:  485:		}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:		{
    #####:  492:			if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:		players[i]++;
        -:  495:	}
        -:  496:		}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:		{
    #####:  502:			if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:		j = i;
        -:  505:	}
        -:  506:		}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:		{
    #####:  512:			if ( players[i] == highScore )
        -:  513:	{
    #####:  514:		players[i] = 1;
        -:  515:	}
        -:  516:			else
        -:  517:	{
    #####:  518:		players[i] = 0;
        -:  519:	}
        -:  520:		}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
       22:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
       22:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
       12:  533:		for (i = 0; i < state->discardCount[player];i++){
    #####:  534:			state->deck[player][i] = state->discard[player][i];
    #####:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
       12:  538:		state->deckCount[player] = state->discardCount[player];
       12:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
       12:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
       12:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
       12:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
       12:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       12:  559:		if (deckCounter == 0)
       12:  560:			return -1;
        -:  561:
    #####:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:		state->deckCount[player]--;
    #####:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
       10:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
       10:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:		state->deckCount[player]--;
       10:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
       10:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber )
        -:  586:		{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo:
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:		}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:// Assignment 2 refactorization function -- Smithy
    #####:  648:int playSmithy(int currentPlayer, struct gameState *state, int handPos){
        -:  649:	// smithy: draw 3
        -:  650:	int i;
    #####:  651:	for (i = 0; i < 5; i++){ // LOOK, IT'S A BUG!
    #####:  652:		drawCard(currentPlayer, state);
        -:  653:	}
        -:  654:
        -:  655:	// Discard card from hand
    #####:  656:	discardCard(handPos, currentPlayer, state, 0);
        -:  657:
    #####:  658:	return 0;
        -:  659:}
        -:  660:
        -:  661:
        -:  662:// Assignment 2 refactorization function -- Adventurer
    #####:  663:int playAdventurer(int currentPlayer, struct gameState *state){
    #####:  664:	int drawnTreasure = 0;
    #####:  665:	int z = 0;
        -:  666:
        -:  667:	int temphand[MAX_HAND];
        -:  668:
    #####:  669:	while (drawnTreasure < 2){
        -:  670:		// Shuffle discard on empty deck
    #####:  671:		if (state->deckCount[currentPlayer] < 1)
    #####:  672:			shuffle(currentPlayer, state);
        -:  673:
        -:  674:		// Draw a card in order to look at it
    #####:  675:		drawCard(currentPlayer, state);
    #####:  676:		int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 2]; // LOOK, IT'S A BUG!
        -:  677:
        -:  678:		// Keep if it's a treasure card
    #####:  679:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  680:			drawnTreasure++;
        -:  681:
        -:  682:		// Otherwise, keep going
        -:  683:		else{
    #####:  684:			temphand[z] = cardDrawn;
    #####:  685:			state->handCount[currentPlayer]--;
    #####:  686:			z++;
        -:  687:		}
        -:  688:	}
        -:  689:
        -:  690:	// The non-treasure cards are discarded
    #####:  691:	while (z - 1 >= 0){
    #####:  692:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  693:		z = z - 1;
        -:  694:	}
        -:  695:
    #####:  696:	return 0;
        -:  697:}
        -:  698:
        -:  699:// Assignment 2 refactorization function -- Council Room
    #####:  700:int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos){
        -:  701:
        -:  702:	int i;
        -:  703:
        -:  704:	// +4 Cards
    #####:  705:	for (i = 0; i < 4; i++)
    #####:  706:		drawCard(currentPlayer, state);
        -:  707:
        -:  708:	// +1 Buy
    #####:  709:	state->numBuys--; // LOOK, IT'S A BUG
        -:  710:
    #####:  711:	for (i = 0; i < state->numPlayers; i++){
    #####:  712:		if (i != currentPlayer)
    #####:  713:			drawCard(i, state);
        -:  714:	}
        -:  715:
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
        -:  717:
    #####:  718:	return 0;
        -:  719:
        -:  720:}
        -:  721:
        -:  722:// Assignment 2 refactorization function -- Baron
    #####:  723:int playBaron(int currentPlayer, struct gameState *state, int choice1){
        -:  724:
    #####:  725:	state->numBuys++;//Increase buys by 1!
    #####:  726:	if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  727:		int p = 0;//Iterator for hand!
    #####:  728:		int card_not_discarded = 1;//Flag for discard set!
    #####:  729:		while(card_not_discarded){
        -:  730:
    #####:  731:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  732:				state->coins += 4;//Add 4 coins to the amount of coins
    #####:  733:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  734:				state->discardCount[currentPlayer]++;
        -:  735:
    #####:  736:				for (;p < state->handCount[0 - currentPlayer]; p++){ // LOOK, IT'S A BUG!
    #####:  737:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  738:				}
        -:  739:
    #####:  740:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  741:				state->handCount[currentPlayer]--;
    #####:  742:				card_not_discarded = 0;//Exit the loop
        -:  743:			}
        -:  744:
    #####:  745:			else if (p > state->handCount[currentPlayer]){
        -:  746:
        -:  747:				if(DEBUG) {
        -:  748:					printf("No estate cards in your hand, invalid choice\n");
        -:  749:					printf("Must gain an estate if there are any\n");
        -:  750:				}
        -:  751:
    #####:  752:				if (supplyCount(estate, state) > 0){
    #####:  753:					gainCard(estate, state, 0, currentPlayer);
        -:  754:
    #####:  755:					state->supplyCount[estate]--;//Decrement estates
    #####:  756:					if (supplyCount(estate, state) == 0)
    #####:  757:						isGameOver(state);
        -:  758:				}
    #####:  759:			card_not_discarded = 0;//Exit the loop
        -:  760:			}
        -:  761:
        -:  762:			else
    #####:  763:				p++;//Next card
        -:  764:		}
        -:  765:	}
        -:  766:
        -:  767:
        -:  768:	else{
    #####:  769:		if (supplyCount(estate, state) > 0){
    #####:  770:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  771:			state->supplyCount[estate]--;//Decrement Estates
    #####:  772:				if (supplyCount(estate, state) == 0)
    #####:  773:					isGameOver(state);
        -:  774:
        -:  775:		}
        -:  776:	}
        -:  777:
    #####:  778:	return 0;
        -:  779:
        -:  780:}
        -:  781:
        -:  782:
        -:  783:// Assignment 2 refactorization function -- Feast
    #####:  784:int playFeast(int currentPlayer, struct gameState *state, int choice1){
        -:  785:
        -:  786:	int i;
        -:  787:	int x;
        -:  788:	int temphand[MAX_HAND];
        -:  789:
        -:  790:	//gain card with cost up to 5
        -:  791:	//Backup hand
    #####:  792:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  793:		temphand[i] = state->hand[currentPlayer][i];	//Backup card
    #####:  794:		state->hand[currentPlayer][i] = -1;				//Set to nothing
        -:  795:	}
        -:  796:
        -:  797:	//Update Coins for Buy
    #####:  798:	updateCoins(currentPlayer, state, 5);
    #####:  799:	x = 1;//Condition to loop on
    #####:  800:	while( x == 1) {//Buy one card
        -:  801:
    #####:  802:		if (supplyCount(choice1, state) <= 0){
        -:  803:			if (DEBUG){
        -:  804:				printf("None of that card left, sorry!\n");
        -:  805:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  806:			}
        -:  807:		}
        -:  808:
    #####:  809:		else if (state->coins < getCost(choice1)){
    #####:  810:			printf("That card is too expensive!\n");
        -:  811:			if (DEBUG)
        -:  812:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  813:		}
        -:  814:
        -:  815:		else{
        -:  816:
        -:  817:			if (DEBUG){
        -:  818:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:			}
        -:  820:
    #####:  821:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  822:			x = 0;//No more buying cards
        -:  823:
        -:  824:			if (DEBUG){
        -:  825:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  826:			}
        -:  827:		}
        -:  828:	}
        -:  829:
        -:  830:	//Reset Hand
    #####:  831:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  832:		state->hand[currentPlayer][i] = temphand[i];
    #####:  833:		temphand[i] = -1;
        -:  834:	}
        -:  835:
    #####:  836:	return 0;
        -:  837:
        -:  838:}
        -:  839:
        -:  840:
    #####:  841:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  842:{
        -:  843:	int i;
        -:  844:	int j;
        -:  845:	int k;
        -:  846:	int x;
        -:  847:	int index;
        -:  848:	int rval; // Return value for the calls to card effect functions
    #####:  849:	int currentPlayer = whoseTurn(state);
    #####:  850:	int nextPlayer = currentPlayer + 1;
        -:  851:
    #####:  852:	int tributeRevealedCards[2] = {-1, -1};
        -:  853:	int temphand[MAX_HAND];// moved above the if statement
        -:  854:	int cardDrawn;
    #####:  855:	int z = 0;// this is the counter for the temp hand
    #####:  856:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  857:		nextPlayer = 0;
        -:  858:	}
        -:  859:
        -:  860:
        -:  861:	//uses switch to select card and perform actions
    #####:  862:	switch( card )
        -:  863:		{
        -:  864:		case adventurer:
    #####:  865:			rval = playAdventurer(currentPlayer, state);
    #####:  866:			return rval;
        -:  867:
        -:  868:		case council_room:
    #####:  869:			rval = playCouncilRoom(currentPlayer, state, handPos);
    #####:  870:			return rval;
        -:  871:
        -:  872:		case feast:
    #####:  873:			rval = playFeast(currentPlayer, state, choice1);
        -:  874:
        -:  875:
        -:  876:		case gardens:
    #####:  877:			return -1;
        -:  878:
        -:  879:		case mine:
    #####:  880:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  881:
    #####:  882:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  883:	{
    #####:  884:		return -1;
        -:  885:	}
        -:  886:
    #####:  887:			if (choice2 > treasure_map || choice2 < curse)
        -:  888:	{
    #####:  889:		return -1;
        -:  890:	}
        -:  891:
    #####:  892:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  893:	{
    #####:  894:		return -1;
        -:  895:	}
        -:  896:
    #####:  897:			gainCard(choice2, state, 2, currentPlayer);
        -:  898:
        -:  899:			//discard card from hand
    #####:  900:			discardCard(handPos, currentPlayer, state, 0);
        -:  901:
        -:  902:			//discard trashed card
    #####:  903:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  904:	{
    #####:  905:		if (state->hand[currentPlayer][i] == j)
        -:  906:			{
    #####:  907:				discardCard(i, currentPlayer, state, 0);
    #####:  908:				break;
        -:  909:			}
        -:  910:	}
        -:  911:
    #####:  912:			return 0;
        -:  913:
        -:  914:		case remodel:
    #####:  915:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  916:
    #####:  917:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  918:	{
    #####:  919:		return -1;
        -:  920:	}
        -:  921:
    #####:  922:			gainCard(choice2, state, 0, currentPlayer);
        -:  923:
        -:  924:			//discard card from hand
    #####:  925:			discardCard(handPos, currentPlayer, state, 0);
        -:  926:
        -:  927:			//discard trashed card
    #####:  928:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  929:	{
    #####:  930:		if (state->hand[currentPlayer][i] == j)
        -:  931:			{
    #####:  932:				discardCard(i, currentPlayer, state, 0);
    #####:  933:				break;
        -:  934:			}
        -:  935:	}
        -:  936:
        -:  937:
    #####:  938:			return 0;
        -:  939:
        -:  940:		case smithy:
    #####:  941:			rval = playSmithy(currentPlayer, state, handPos);
    #####:  942:			return rval;
        -:  943:
        -:  944:		case village:
        -:  945:			//+1 Card
    #####:  946:			drawCard(currentPlayer, state);
        -:  947:
        -:  948:			//+2 Actions
    #####:  949:			state->numActions = state->numActions + 2;
        -:  950:
        -:  951:			//discard played card from hand
    #####:  952:			discardCard(handPos, currentPlayer, state, 0);
    #####:  953:			return 0;
        -:  954:
        -:  955:		case baron:
        -:  956:
    #####:  957:			rval = playBaron(currentPlayer, state, choice1);
    #####:  958:			return rval;
        -:  959:
        -:  960:		case great_hall:
        -:  961:			//+1 Card
    #####:  962:			drawCard(currentPlayer, state);
        -:  963:
        -:  964:			//+1 Actions
    #####:  965:			state->numActions++;
        -:  966:
        -:  967:			//discard card from hand
    #####:  968:			discardCard(handPos, currentPlayer, state, 0);
    #####:  969:			return 0;
        -:  970:
        -:  971:		case minion:
        -:  972:			//+1 action
    #####:  973:			state->numActions++;
        -:  974:
        -:  975:			//discard card from hand
    #####:  976:			discardCard(handPos, currentPlayer, state, 0);
        -:  977:
    #####:  978:			if (choice1)		//+2 coins
        -:  979:	{
    #####:  980:		state->coins = state->coins + 2;
        -:  981:	}
        -:  982:
    #####:  983:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  984:	{
        -:  985:		//discard hand
    #####:  986:		while(numHandCards(state) > 0)
        -:  987:			{
    #####:  988:				discardCard(handPos, currentPlayer, state, 0);
        -:  989:			}
        -:  990:
        -:  991:		//draw 4
    #####:  992:		for (i = 0; i < 4; i++)
        -:  993:			{
    #####:  994:				drawCard(currentPlayer, state);
        -:  995:			}
        -:  996:
        -:  997:		//other players discard hand and redraw if hand size > 4
    #####:  998:		for (i = 0; i < state->numPlayers; i++)
        -:  999:			{
    #####: 1000:				if (i != currentPlayer)
        -: 1001:		{
    #####: 1002:			if ( state->handCount[i] > 4 )
        -: 1003:				{
        -: 1004:					//discard hand
    #####: 1005:					while( state->handCount[i] > 0 )
        -: 1006:			{
    #####: 1007:				discardCard(handPos, i, state, 0);
        -: 1008:			}
        -: 1009:
        -: 1010:					//draw 4
    #####: 1011:					for (j = 0; j < 4; j++)
        -: 1012:			{
    #####: 1013:				drawCard(i, state);
        -: 1014:			}
        -: 1015:				}
        -: 1016:		}
        -: 1017:			}
        -: 1018:
        -: 1019:	}
    #####: 1020:			return 0;
        -: 1021:
        -: 1022:		case steward:
    #####: 1023:			if (choice1 == 1)
        -: 1024:	{
        -: 1025:		//+2 cards
    #####: 1026:		drawCard(currentPlayer, state);
    #####: 1027:		drawCard(currentPlayer, state);
        -: 1028:	}
    #####: 1029:			else if (choice1 == 2)
        -: 1030:	{
        -: 1031:		//+2 coins
    #####: 1032:		state->coins = state->coins + 2;
        -: 1033:	}
        -: 1034:			else
        -: 1035:	{
        -: 1036:		//trash 2 cards in hand
    #####: 1037:		discardCard(choice2, currentPlayer, state, 1);
    #####: 1038:		discardCard(choice3, currentPlayer, state, 1);
        -: 1039:	}
        -: 1040:
        -: 1041:			//discard card from hand
    #####: 1042:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1043:			return 0;
        -: 1044:
        -: 1045:		case tribute:
    #####: 1046:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1047:	if (state->deckCount[nextPlayer] > 0){
    #####: 1048:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:		state->deckCount[nextPlayer]--;
        -: 1050:	}
    #####: 1051:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1052:		tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1053:		state->discardCount[nextPlayer]--;
        -: 1054:	}
        -: 1055:	else{
        -: 1056:		//No Card to Reveal
        -: 1057:		if (DEBUG){
        -: 1058:			printf("No cards to reveal\n");
        -: 1059:		}
        -: 1060:	}
        -: 1061:			}
        -: 1062:
        -: 1063:			else{
    #####: 1064:	if (state->deckCount[nextPlayer] == 0){
    #####: 1065:		for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1066:			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1067:			state->deckCount[nextPlayer]++;
    #####: 1068:			state->discard[nextPlayer][i] = -1;
    #####: 1069:			state->discardCount[nextPlayer]--;
        -: 1070:		}
        -: 1071:
    #####: 1072:		shuffle(nextPlayer,state);//Shuffle the deck
        -: 1073:	}
    #####: 1074:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1075:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1076:	state->deckCount[nextPlayer]--;
    #####: 1077:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1078:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1079:	state->deckCount[nextPlayer]--;
        -: 1080:			}
        -: 1081:
    #####: 1082:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1083:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1084:	state->playedCardCount++;
    #####: 1085:	tributeRevealedCards[1] = -1;
        -: 1086:			}
        -: 1087:
    #####: 1088:			for (i = 0; i <= 2; i ++){
    #####: 1089:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1090:		state->coins += 2;
        -: 1091:	}
        -: 1092:
    #####: 1093:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1094:		drawCard(currentPlayer, state);
    #####: 1095:		drawCard(currentPlayer, state);
        -: 1096:	}
        -: 1097:	else{//Action Card
    #####: 1098:		state->numActions = state->numActions + 2;
        -: 1099:	}
        -: 1100:			}
        -: 1101:
    #####: 1102:			return 0;
        -: 1103:
        -: 1104:		case ambassador:
    #####: 1105:			j = 0;		//used to check if player has enough cards to discard
        -: 1106:
    #####: 1107:			if (choice2 > 2 || choice2 < 0)
        -: 1108:	{
    #####: 1109:		return -1;
        -: 1110:	}
        -: 1111:
    #####: 1112:			if (choice1 == handPos)
        -: 1113:	{
    #####: 1114:		return -1;
        -: 1115:	}
        -: 1116:
    #####: 1117:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	{
    #####: 1119:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1120:			{
    #####: 1121:				j++;
        -: 1122:			}
        -: 1123:	}
    #####: 1124:			if (j < choice2)
        -: 1125:	{
    #####: 1126:		return -1;
        -: 1127:	}
        -: 1128:
        -: 1129:			if (DEBUG)
        -: 1130:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1131:
        -: 1132:			//increase supply count for choosen card by amount being discarded
    #####: 1133:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1134:
        -: 1135:			//each other player gains a copy of revealed card
    #####: 1136:			for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
    #####: 1138:		if (i != currentPlayer)
        -: 1139:			{
    #####: 1140:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1141:			}
        -: 1142:	}
        -: 1143:
        -: 1144:			//discard played card from hand
    #####: 1145:			discardCard(handPos, currentPlayer, state, 0);
        -: 1146:
        -: 1147:			//trash copies of cards returned to supply
    #####: 1148:			for (j = 0; j < choice2; j++)
        -: 1149:	{
    #####: 1150:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1151:			{
    #####: 1152:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1153:		{
    #####: 1154:			discardCard(i, currentPlayer, state, 1);
    #####: 1155:			break;
        -: 1156:		}
        -: 1157:			}
        -: 1158:	}
        -: 1159:
    #####: 1160:			return 0;
        -: 1161:
        -: 1162:		case cutpurse:
        -: 1163:
    #####: 1164:			updateCoins(currentPlayer, state, 2);
    #####: 1165:			for (i = 0; i < state->numPlayers; i++)
        -: 1166:	{
    #####: 1167:		if (i != currentPlayer)
        -: 1168:			{
    #####: 1169:				for (j = 0; j < state->handCount[i]; j++)
        -: 1170:		{
    #####: 1171:			if (state->hand[i][j] == copper)
        -: 1172:				{
    #####: 1173:					discardCard(j, i, state, 0);
    #####: 1174:					break;
        -: 1175:				}
    #####: 1176:			if (j == state->handCount[i])
        -: 1177:				{
    #####: 1178:					for (k = 0; k < state->handCount[i]; k++)
        -: 1179:			{
        -: 1180:				if (DEBUG)
        -: 1181:					printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1182:			}
    #####: 1183:					break;
        -: 1184:				}
        -: 1185:		}
        -: 1186:
        -: 1187:			}
        -: 1188:
        -: 1189:	}
        -: 1190:
        -: 1191:			//discard played card from hand
    #####: 1192:			discardCard(handPos, currentPlayer, state, 0);
        -: 1193:
    #####: 1194:			return 0;
        -: 1195:
        -: 1196:
        -: 1197:		case embargo:
        -: 1198:			//+2 Coins
    #####: 1199:			state->coins = state->coins + 2;
        -: 1200:
        -: 1201:			//see if selected pile is in play
    #####: 1202:			if ( state->supplyCount[choice1] == -1 )
        -: 1203:	{
    #####: 1204:		return -1;
        -: 1205:	}
        -: 1206:
        -: 1207:			//add embargo token to selected supply pile
    #####: 1208:			state->embargoTokens[choice1]++;
        -: 1209:
        -: 1210:			//trash card
    #####: 1211:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1212:			return 0;
        -: 1213:
        -: 1214:		case outpost:
        -: 1215:			//set outpost flag
    #####: 1216:			state->outpostPlayed++;
        -: 1217:
        -: 1218:			//discard card
    #####: 1219:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:			return 0;
        -: 1221:
        -: 1222:		case salvager:
        -: 1223:			//+1 buy
    #####: 1224:			state->numBuys++;
        -: 1225:
    #####: 1226:			if (choice1)
        -: 1227:	{
        -: 1228:		//gain coins equal to trashed card
    #####: 1229:		state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1230:		//trash card
    #####: 1231:		discardCard(choice1, currentPlayer, state, 1);
        -: 1232:	}
        -: 1233:
        -: 1234:			//discard card
    #####: 1235:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1236:			return 0;
        -: 1237:
        -: 1238:		case sea_hag:
    #####: 1239:			for (i = 0; i < state->numPlayers; i++){
    #####: 1240:	if (i != currentPlayer){
    #####: 1241:		state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1242:		state->discardCount[i]++;
    #####: 1243:		state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1244:	}
        -: 1245:			}
    #####: 1246:			return 0;
        -: 1247:
        -: 1248:		case treasure_map:
        -: 1249:			//search hand for another treasure_map
    #####: 1250:			index = -1;
    #####: 1251:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1252:	{
    #####: 1253:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1254:			{
    #####: 1255:				index = i;
    #####: 1256:				break;
        -: 1257:			}
        -: 1258:	}
    #####: 1259:			if (index > -1)
        -: 1260:	{
        -: 1261:		//trash both treasure cards
    #####: 1262:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1263:		discardCard(index, currentPlayer, state, 1);
        -: 1264:
        -: 1265:		//gain 4 Gold cards
    #####: 1266:		for (i = 0; i < 4; i++)
        -: 1267:			{
    #####: 1268:				gainCard(gold, state, 1, currentPlayer);
        -: 1269:			}
        -: 1270:
        -: 1271:		//return success
    #####: 1272:		return 1;
        -: 1273:	}
        -: 1274:
        -: 1275:			//no second treasure_map found in hand
    #####: 1276:			return -1;
        -: 1277:		}
        -: 1278:
    #####: 1279:	return -1;
        -: 1280:}
        -: 1281:
       12: 1282:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1283:{
        -: 1284:
        -: 1285:	//if card is not trashed, added to Played pile
       12: 1286:	if (trashFlag < 1)
        -: 1287:		{
        -: 1288:			//add card to played pile
       12: 1289:			state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1290:			state->playedCardCount++;
        -: 1291:		}
        -: 1292:
        -: 1293:	//set played card to -1
       12: 1294:	state->hand[currentPlayer][handPos] = -1;
        -: 1295:
        -: 1296:	//remove card from player's hand
       12: 1297:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1298:		{
        -: 1299:			//reduce number of cards in hand
        1: 1300:			state->handCount[currentPlayer]--;
        -: 1301:		}
       11: 1302:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1303:		{
        -: 1304:			//reduce number of cards in hand
    #####: 1305:			state->handCount[currentPlayer]--;
        -: 1306:		}
        -: 1307:	else
        -: 1308:		{
        -: 1309:			//replace discarded card with last card in hand
       11: 1310:			state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1311:			//set last card to -1
       11: 1312:			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1313:			//reduce number of cards in hand
       11: 1314:			state->handCount[currentPlayer]--;
        -: 1315:		}
        -: 1316:
       12: 1317:	return 0;
        -: 1318:}
        -: 1319:
    #####: 1320:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1321:{
        -: 1322:	//Note: supplyPos is enum of choosen card
        -: 1323:
        -: 1324:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1325:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1326:		{
    #####: 1327:			return -1;
        -: 1328:		}
        -: 1329:
        -: 1330:	//added card for [whoseTurn] current player:
        -: 1331:	// toFlag = 0 : add to discard
        -: 1332:	// toFlag = 1 : add to deck
        -: 1333:	// toFlag = 2 : add to hand
        -: 1334:
    #####: 1335:	if (toFlag == 1)
        -: 1336:		{
    #####: 1337:			state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1338:			state->deckCount[player]++;
        -: 1339:		}
    #####: 1340:	else if (toFlag == 2)
        -: 1341:		{
    #####: 1342:			state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1343:			state->handCount[player]++;
        -: 1344:		}
        -: 1345:	else
        -: 1346:		{
    #####: 1347:			state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1348:			state->discardCount[player]++;
        -: 1349:		}
        -: 1350:
        -: 1351:	//decrease number in supply pile
    #####: 1352:	state->supplyCount[supplyPos]--;
        -: 1353:
    #####: 1354:	return 0;
        -: 1355:}
        -: 1356:
        1: 1357:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1358:{
        -: 1359:	int i;
        -: 1360:
        -: 1361:	//reset coin count
        1: 1362:	state->coins = 0;
        -: 1363:
        -: 1364:	//add coins for each Treasure card in player's hand
        6: 1365:	for (i = 0; i < state->handCount[player]; i++)
        -: 1366:		{
        5: 1367:			if (state->hand[player][i] == copper)
        -: 1368:	{
        3: 1369:		state->coins += 1;
        -: 1370:	}
        2: 1371:			else if (state->hand[player][i] == silver)
        -: 1372:	{
    #####: 1373:		state->coins += 2;
        -: 1374:	}
        2: 1375:			else if (state->hand[player][i] == gold)
        -: 1376:	{
    #####: 1377:		state->coins += 3;
        -: 1378:	}
        -: 1379:		}
        -: 1380:
        -: 1381:	//add bonus
        1: 1382:	state->coins += bonus;
        -: 1383:
        1: 1384:	return 0;
        -: 1385:}
        -: 1386:
        -: 1387:
        -: 1388:
        -: 1389:
        -: 1390:
        -: 1391:
        -: 1392:
        -: 1393://end of dominion.c
